@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject BlazorAppTestOgSikkerhed.Code.MyRoleHandler _myRoleHandler;
@inject IServiceProvider _iServiceProvider;
@inject BlazorAppTestOgSikkerhed.Code.MyResourceHandler _myResourceHandler;

@page "/"

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>
@if (IsAuthenticated)
{
    <h3>Du er logget ind.</h3>
    @if (IsAdmin)
    {
        <h3>Du er Admin</h3>

    }
    <button class="btn btn-primary" @onclick="Make">Make a file!</button>
}

@*// On load event*@
@code {

    public bool IsAuthenticated { get; set; }
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // This code will make User admin or other roles
        // Set brake point, uncomment this line, run application. User is now has the provided role.
        //await _myRoleHandler.CreateUserRoles("test@testMail.com", "Admin", _iServiceProvider);

        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsAuthenticated = user.Identity != null ? user.Identity.IsAuthenticated : false;
        IsAdmin = user.IsInRole("Admin");

        // Ovenstående komprimeret af denne kode!
        //if (user.Identity != null)
        //{
        //    IsAuthenticated = user.Identity.IsAuthenticated;
        //}

    }

    public void Make()
    {
        if (!File.Exists("BlazorAppTest.txt"))
        {
            var testFolder = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
            string folderPath = Path.Combine(testFolder, "BlazorAppTest.txt"); // Opretter en fil cross platform (Path.Combine)
            File.CreateText(folderPath);            
        }

    }


}
